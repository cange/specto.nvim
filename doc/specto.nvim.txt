*specto.nvim.txt*       For Neovim >= 0.9.0       Last change: 2024 January 22

==============================================================================
Table of Contents                              *specto.nvim-table-of-contents*

  - Installation                                    |specto.nvim-installation|
  - Usage                                                  |specto.nvim-usage|
  - Configuration                                  |specto.nvim-configuration|

Specto makes it easy to switch certain test blocks on and off depending on the
language and test framework functionality, so that they can be "only" executed
or "skipped".


INSTALLATION                                        *specto.nvim-installation*

Install the plugin with your preferred package manager:


LAZY.NVIM ~

>lua
    {
      "cange/specto.nvim",
      dependencies = "nvim-treesitter/nvim-treesitter",
      opts = {}
    }
<


USAGE                                                      *specto.nvim-usage*

Allows to toggle certain tests blocks with a `only` or `skip` flag (see
|specto.nvim-supported-language|).

Calling one of the following within a spec block such as `it(…)`


SKIP() ~

>lua
    :lua require('specto.toggle').skip()
    -- or
    :Specto toggle skip
<

Toggles `it(…)` -> `it.skip(…)` in JavaScript


ONLY() ~

>lua
    :lua require('specto.toggle').only()
    -- or
    :Specto toggle only
<

Toggles `it(…)` -> `it.only(…)` in JavaScript


  [!NOTE] The feature set depends on the respective language and its testing
  framework.

KEYBINDINGS ~

The provided commands can either be called directly via `:Specto toggle *`
within a test block or used via keybinding.

>lua
    vim.keymap.set("n", "<leader>to", "<cmd>Specto toggle only<CR>" )
    vim.keymap.set("n", "<leader>ts", "<cmd>Specto toggle skip<CR>" )
<


SCOPE ~

Triggering a toggle only applies to the block in which the cursor is currently
located.

>js
    describe('context', () => {
      // ↓ toggle applies here
      it.skip('something', () => {
        expect(█)
        //     ↳  cursor here
      })
    })
<


CONFIGURATION                                      *specto.nvim-configuration*

Specto comes with the following defaults:

>lua
    languages = {
      -- set default config for all defined languages
      ["*"] = {
        file_patterns = {},
        features = {},
      },
      -- ... other languages
    }
<

See config.lua <./lua/specto/config.lua> for more details.


LANGUAGE SETTINGS ~

Each language can be define an individual set for `only` and `skip` features.

>lua
    <LANUGAGE_NAME> = { -- eg. javascript
      -- Files or directories where tests can be found.
      -- Expects an array of string patterns that can be used with `string.match`.
      file_patterns = {  }, -- eg. `{ "__tests__/", "%.?spec%." }`
    
      features = {
        -- subset of criteria of each feature
        only { -- or skip
          flag = "only", -- identfier name
          keywords = { "it", "describe", "test" }, -- defines on which blocks it can be attached to
          prefix = false, -- position of flag, false adds flag at the end of a keyword
          separator = ".", -- defines if an flag came with a certain mark eg. `describe.only`
      },
    }
<


SUPPORTED LANGUAGES ~

List of supported languages and their dedicated DSLs (eg. `it`, `describe`,
`test`).

  Language       DSL   Features     Examples
  ------------ ------- ------------ -----------------
  javascript    jest   only, skip   it.only,it.skip
  typescript    jest   only, skip   it.only,it.skip
  ryby          rspec  skip         xit

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
