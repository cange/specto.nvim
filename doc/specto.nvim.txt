*specto.nvim.txt*        For Neovim >= 0.9.0        Last change: 2025 March 02

==============================================================================
Table of Contents                              *specto.nvim-table-of-contents*

  - Features                                            |specto.nvim-features|
  - Getting Started                              |specto.nvim-getting-started|
  - Configuration                                  |specto.nvim-configuration|


FEATURES                                                *specto.nvim-features*

- Toggle test modifiers in JavaScript/TypeScript test files
    - `it()` ⟷ `it.only()`
    - `it()` ⟷ `it.skip()`
    - `it()` ⟷ `it.todo()`
    - Works with `describe()` and `test()` blocks too
- Support for Ruby RSpec files
    - Toggle skip prefix: `it()` ⟷ `xit()`
    - Works with `context`, `describe`, `example`, `scenario`, `specify`, and `test` blocks
- Smart detection of common test files (e.g.� `*.spec.js`, `*_spec.rb`, etc.)
- Dot-repeat previous actions


SCOPE ~

Triggering a toggle only applies to the block in which the cursor is currently
located.

>js
    describe('context', () => {
      // ↓ toggle applies here
      it.skip('something', () => {
        expect(|)
        //     ^ cursor here
      })
    })
<


GETTING STARTED                                  *specto.nvim-getting-started*


REQUIREMENTS ~

- Neovim >= 0.9.0
- nvim-treesitter <https://github.com/nvim-treesitter/nvim-treesitter>


INSTALLATION ~

Install the plugin with your preferred package manager:

lazy.nvim ~

>lua
    {
      "cange/specto.nvim",
      dependencies = "nvim-treesitter/nvim-treesitter",
      opts = {}
    }
<


COMMANDS ~

>lua
    :Specto toggle skip
    :Specto toggle only
    :Specto toggle todo
<


  [!NOTE] The feature set depends on the respective language and its testing
  framework.

KEYBINDINGS ~

The provided commands can either be called directly via `:Specto toggle *`
within a test block or used via keybinding.

>lua
    vim.keymap.set("n", "<leader>to", "<cmd>Specto toggle only<CR>", { desc = "Toggle test only" })
    vim.keymap.set("n", "<leader>ts", "<cmd>Specto toggle skip<CR>", { desc = "Toggle test skip" })
    vim.keymap.set("n", "<leader>tt", "<cmd>Specto toggle todo<CR>", { desc = "Toggle test todo" })
<


CONFIGURATION                                      *specto.nvim-configuration*

Specto comes with the following defaults:

>lua
    require("specto").setup({ -- BEGIN_DEFAULT_OPTS
      exclude = {
        filetypes = { -- exclude certain files by default
          "help",
        }
      },
      languages = {
        -- set default config for all defined languages
        ["*"] = {
          filetypes = {},
          file_patterns = {},
          features = {},
        },
        -- ... other languages
      }
    })
<

See config.lua <./lua/specto/config.lua> for more details.


LANGUAGE SETTINGS ~

Each language can define an individual set for `only` and `skip` features.

>lua
    javascript = { -- example: "ruby", etc.
      filetypes = { "javascript", "typescript" }, -- a subset of supported language
    
      -- Files or directories where tests can be found.
      -- Expects an array of string patterns that can be used with `string.match`.
      file_patterns = {  }, -- eg. `{ "__tests__/", "%.?spec%." }`
    
      features = {
        -- subset of criteria of each feature
        only = { -- or skip, todo
          flag = "only", -- identfier name
          keywords = { "it", "describe", "test" }, -- defines on which blocks it can be attached to
          prefix = false, -- position of flag, false adds flag at the end of a keyword
          separator = ".", -- defines if a flag came with a certain mark eg. `describe.only`
        },
      },
    }
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
